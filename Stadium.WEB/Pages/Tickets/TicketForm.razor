@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Fecha Uso:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Ticket.UseDate" />
            <ValidationMessage For="@(() => Ticket.UseDate)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Fue Usada:</label>
        <div>
            <InputCheckbox class="form-control" @bind-Value="@Ticket.FueUsada" />
            <ValidationMessage For="@(() => Ticket.FueUsada)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Portería por la que entró la persona:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@Ticket.Porteria">
                @foreach (var option in new[] { "Norte", "Sur", "Oriental", "Occidental" })
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Ticket.Porteria)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>


@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Ticket Ticket { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Ticket);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}